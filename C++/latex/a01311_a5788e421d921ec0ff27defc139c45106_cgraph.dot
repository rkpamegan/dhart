digraph "HF::GraphGenerator::GraphGenerator::IMPL_BuildNetwork"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node1 [label="HF::GraphGenerator\l::GraphGenerator::IMPL\l_BuildNetwork",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Generate a graph of accessible space."];
  Node1 -> Node2 [color="steelblue1",style="solid"];
  Node2 [label="HF::GraphGenerator\l::GraphGenerator::CrawlGeom",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a01311.html#ac7052d4b625fb96f29c5bfc091a86f7e",tooltip="Perform breadth first search to populate the graph with with nodes and edges."];
  Node2 -> Node3 [color="steelblue1",style="solid"];
  Node3 [label="HF::SpatialStructures\l::Graph::addEdge",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a01551.html#a37be5c12e488072dea7fa1c8c64346f7",tooltip="Add a new edge to the graph from parent to child."];
  Node2 -> Node4 [color="steelblue1",style="solid"];
  Node4 [label="HF::GraphGenerator\l::CastToReal3",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00463.html#a58892abe1152c28d26d3ca749c99ea4d",tooltip="Cast an array of 3 values to the graph_generator's real_3 type."];
  Node4 -> Node5 [color="steelblue1",style="solid"];
  Node5 [label="HF::GraphGenerator\l::CastToReal",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00463.html#a73b53db067a504d36e9481dfe3326b60",tooltip="Cast an input value to real_t using static cast."];
  Node2 -> Node6 [color="steelblue1",style="solid"];
  Node6 [label="HF::GraphGenerator\l::CreateDirecs",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00463.html#aefd344ebb2faadc64a56a16dc8582026",tooltip="Create a set of directions based on max_step_connections."];
  Node6 -> Node7 [color="steelblue1",style="solid"];
  Node7 [label="HF::GraphGenerator\l::permutations",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00463.html#afe5670b4cb780fd3ccf2a0d72a2e3c2e",tooltip="Calculate P(n,r) as an array with each unique permutaton of 2 values being a pair."];
  Node2 -> Node8 [color="steelblue1",style="solid"];
  Node8 [label="HF::GraphGenerator\l::UniqueQueue::empty",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a01315.html#ab659349de3391b0e2327f3736135752f",tooltip="Tell if the queue is empty."];
  Node8 -> Node9 [color="steelblue1",style="solid"];
  Node9 [label="HF::GraphGenerator\l::UniqueQueue::size",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a01315.html#a6d38edb96130bda3eb8126cc7501065f",tooltip="Determine how many nodes are currently in the queue."];
  Node2 -> Node10 [color="steelblue1",style="solid"];
  Node10 [label="HF::GraphGenerator\l::GeneratePotentialChildren",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00463.html#a41e03f9bab54e4e0d1314c6a4bdf2ec1",tooltip="Populare out_children with a potential child position for every direction in directions."];
  Node2 -> Node11 [color="steelblue1",style="solid"];
  Node11 [label="HF::GraphGenerator\l::GetChildren",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00463.html#ab7ffcc7d6657ce276c06deed24c546a4",tooltip="Calculate all possible edges between parent and possible_children."];
  Node11 -> Node12 [color="steelblue1",style="solid"];
  Node12 [label="HF::GraphGenerator\l::CheckChildren",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00463.html#a4b7cc0ad0002975404acef5064f4f546",tooltip="Determine whether children are over valid ground, and and meet upstep/downstep requirements."];
  Node12 -> Node13 [color="steelblue1",style="solid"];
  Node13 [label="HF::GraphGenerator\l::CheckRay",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00463.html#a74be560268a713fc9e9b8b4a453afa2f",tooltip="Cast a ray and get the point of intersection if it connects."];
  Node13 -> Node14 [color="steelblue1",style="solid"];
  Node14 [label="HF::GraphGenerator\l::CheckGeometryID",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00463.html#ab731d597ee2a843f7b7cb1ccbae67782",tooltip="Determine if a hit is against the geometry type specified."];
  Node13 -> Node15 [color="steelblue1",style="solid"];
  Node15 [label="HF::RayTracer::HitStruct\l::DidHit",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a01415.html#a3d86c2c8d8e0ec6bf63a653ec89807a8",tooltip="Determine whether or not this hitstruct contains a hit."];
  Node15 -> Node16 [color="steelblue1",style="solid"];
  Node16 [label="HF::RayTracer::DidIntersect",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00464.html#a2630761a64fac02a4ee33abaf5c885a1",tooltip=" "];
  Node13 -> Node17 [color="steelblue1",style="solid"];
  Node17 [label="HF::RayTracer::MultiRT\l::Intersect",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a01419.html#a7ee672618f7fe9ce6938978d93d18514",tooltip=" "];
  Node17 -> Node17 [color="steelblue1",style="solid"];
  Node13 -> Node18 [color="steelblue1",style="solid"];
  Node18 [label="HF::GraphGenerator\l::MoveNode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00463.html#a5ad3e8fac4a21eee744f3633f7a3692f",tooltip="Move a node in direction by dist units."];
  Node11 -> Node19 [color="steelblue1",style="solid"];
  Node19 [label="HF::GraphGenerator\l::CheckConnection",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00463.html#a260a25e02193ce904849ee090daefa2e",tooltip="Determine what kind of step (if any) is between parent and child, given that a connection was verifie..."];
  Node19 -> Node20 [color="steelblue1",style="solid"];
  Node20 [label="HF::GraphGenerator\l::OcclusionCheck",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00463.html#ace66c1b60785c32433402f012019ab81",tooltip="Determine if there is a valid line of sight between parent and child."];
  Node20 -> Node21 [color="steelblue1",style="solid"];
  Node21 [label="HF::GraphGenerator\l::DirectionTo",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00463.html#a750afc15c798c79a8b6a0784ed092f3c",tooltip="Calculate the normalized direction from one node to another."];
  Node21 -> Node22 [color="steelblue1",style="solid"];
  Node22 [label="HF::GraphGenerator\l::Normalize",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00463.html#ad2e09e0825a1db4fc511907179eddf00",tooltip="Normalize a vector."];
  Node20 -> Node23 [color="steelblue1",style="solid"];
  Node23 [label="HF::GraphGenerator\l::DistanceTo",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00463.html#a7f96186b8f24f878404d1feccf2f64db",tooltip="Calculate the distance between two nodes."];
  Node20 -> Node24 [color="steelblue1",style="solid"];
  Node24 [label="HF::RayTracer::MultiRT\l::Occluded",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a01419.html#a22ebf97e859ef651e81deb40b74f668f",tooltip=" "];
  Node24 -> Node24 [color="steelblue1",style="solid"];
  Node11 -> Node23 [color="steelblue1",style="solid"];
  Node11 -> Node25 [color="steelblue1",style="solid"];
  Node25 [label="HF::GraphGenerator\l::ToNode",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00463.html#abf1a3ae7dc89b3cf430e059a87fcd477",tooltip="Convert a point_type to a node."];
  Node2 -> Node26 [color="steelblue1",style="solid"];
  Node26 [label="HF::GraphGenerator\l::UniqueQueue::pop",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a01315.html#a4aab642bf2c86a04f6890711ab7f2437",tooltip="Remove the topmost node from the queue and return it."];
  Node2 -> Node27 [color="steelblue1",style="solid"];
  Node27 [label="HF::GraphGenerator\l::UniqueQueue::PushAny",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a01315.html#a35a8d70ffef5833ae214feaa89aaf220",tooltip="Call push with any type of object."];
  Node27 -> Node28 [color="steelblue1",style="solid"];
  Node28 [label="HF::GraphGenerator\l::UniqueQueue::push",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a01315.html#ae0dc637a2d7c3aae32d8f035ac6b8016",tooltip="Add a node to the queue if it has never previously been in the queue."];
  Node1 -> Node29 [color="steelblue1",style="solid"];
  Node29 [label="HF::GraphGenerator\l::GraphGenerator::CrawlGeom\lParallel",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a01311.html#a843cc6b5b69b5d013930b3685789fa15",tooltip="Perform breadth first search to populate the graph with nodes and edges using multiple cores."];
  Node29 -> Node3 [color="steelblue1",style="solid"];
  Node29 -> Node4 [color="steelblue1",style="solid"];
  Node29 -> Node6 [color="steelblue1",style="solid"];
  Node29 -> Node8 [color="steelblue1",style="solid"];
  Node29 -> Node10 [color="steelblue1",style="solid"];
  Node29 -> Node11 [color="steelblue1",style="solid"];
  Node29 -> Node30 [color="steelblue1",style="solid"];
  Node30 [label="HF::GraphGenerator\l::UniqueQueue::popMany",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a01315.html#ae941f357ddbefc3b670c43ce2d90b589",tooltip="Pop a set amount of nodes from the queue, and return them as a vector."];
  Node30 -> Node26 [color="steelblue1",style="solid"];
  Node30 -> Node9 [color="steelblue1",style="solid"];
  Node29 -> Node28 [color="steelblue1",style="solid"];
  Node29 -> Node9 [color="steelblue1",style="solid"];
  Node1 -> Node27 [color="steelblue1",style="solid"];
  Node1 -> Node31 [color="steelblue1",style="solid"];
  Node31 [label="HF::GraphGenerator\l::SetupCoreCount",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00463.html#af8cc1a7a794699308cf5c46d3ae59491",tooltip="Sets the core count of OpenMP."];
  Node1 -> Node32 [color="steelblue1",style="solid"];
  Node32 [label="HF::GraphGenerator\l::ValidateStartPoint",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$a00463.html#a9ddffecb75b34434d7157b49d3c67b60",tooltip="Determine if the start point of the graph is over valid ground."];
  Node32 -> Node13 [color="steelblue1",style="solid"];
}
